{"version":3,"sources":["ng://@polpware/ngx-i18n-store/lib/services/resource-loader.service.ts"],"names":["_","externalInterface.underscore","ResourceLoaderService","ngZone","cache","SlidingExpirationCache","this","_resourceLoader","ResourceLoader","Object","defineProperty","prototype","loadPromise","langCode","filter","resourceLoader","getPromise","id","then","resolvedOptionsUrl","loadJsonUriP","resolvedOptions","options","lang","entry","find","e","code","substring","resolvedLangCode","Error","filteredLangCode","resolvedUrlTmpl","replace","resolvedUrl","resolvedData","I18n","add","items","recycleOthers","loadOptionPromise","core","ɵɵinject","NgZone","factory","ɵfac"],"mappings":"+hBAgBA,IAAMA,EAAIC,EAAAA,4BAgCN,SAAAC,EAAYC,GACR,IAAMC,EAAQ,IAAIC,EAAAA,uBAA4B,IAAQ,IAAQF,GAC9DG,KAAKC,gBAAkB,IAAIC,EAAAA,eAAeJ,UAG9CK,OAAAC,eAAWR,EAAAS,UAAA,iBAAc,KAAzB,WACI,OAAOL,KAAKC,iDAWhBL,EAAAS,UAAAC,YAAA,SAAYC,EAAkBC,GAC1B,IAAMC,EAAiBT,KAAKC,gBAC5B,OAAOQ,EAAeC,WAAmB,gBAAgB,SAAAC,GAAM,OAAAA,KAC1DC,MAAK,SAASC,GACX,OAAOC,EAAAA,aAAaD,MAEvBD,MAAK,SAASG,GACX,OAxCEC,EAwCcD,EAvCxBE,EAuCyCV,GAvC1B,SACbW,EAAQxB,EAAEyB,KAAKH,GAAS,SAAAI,GAAK,OAAAA,EAAEC,KAAKC,UAAU,EAAG,KAAOL,EAAKK,UAAU,EAAG,SAE5EL,EAAOC,EAAMG,MAGVJ,EAPX,IAAkBD,EACVC,EACEC,KAwCGN,MAAK,SAASW,GACX,GAAIA,IAAqBf,EACrB,MAAM,IAAIgB,MAAM,iCAAmCD,GAEvD,OAAOA,KAEVX,MAAK,SAASa,GAEX,OADAlB,EAAWkB,EACJhB,EAAeC,WAAmB,gBAAgB,SAAAC,GAAM,OAAAA,QAElEC,MAAK,SAASc,GACX,OAAOC,EAAAA,QAAQD,EAAiB,CAAEL,KAAMd,OAE3CK,MAAK,SAASgB,GACX,OAAOd,EAAAA,aAAac,MAEvBhB,MAAK,SAASiB,GAGX,OAFAC,EAAAA,KAAKC,IAAIF,EAAaR,KAAMQ,EAAaG,OACzCF,EAAAA,KAAKG,cAAcJ,EAAaR,MACzBQ,MASnBjC,EAAAS,UAAA6B,kBAAA,WACI,OAAOlC,KAAKC,gBAAgBS,WAAW,gBAAgB,SAAAC,GAAM,OAAAA,KACxDC,MAAK,SAASC,GACX,OAAOC,EAAAA,aAAaD,wCA7DvBjB,GAAqBuC,EAAAC,SAAAD,EAAAE,8CAArBzC,EAAqB0C,QAArB1C,EAAqB2C","sourcesContent":["import { Injectable, NgZone } from '@angular/core';\r\n\r\nimport * as externalInterface from '@polpware/fe-dependencies';\r\nimport { replace } from '@polpware/fe-utilities';\r\n\r\nimport { loadJsonUriP } from '@polpware/fe-data';\r\nimport { I18n } from '@polpware/fe-data';\r\nimport { ResourceLoader } from '@polpware/fe-data';\r\n\r\nimport {\r\n    ISlidingExpireCache\r\n} from '@polpware/fe-data';\r\nimport {\r\n    SlidingExpirationCache\r\n} from '@polpware/fe-data';\r\n\r\nconst _ = externalInterface.underscore;\r\n\r\ninterface ILangOptionEntry {\r\n    code: string;\r\n    text: string;\r\n}\r\n\r\n/**\r\n * Verify if the given lang is valid. If the given lang is not valid,\r\n * this function returns a default one.\r\n * @private\r\n * @function validate\r\n * @param {Object} options The avaliable lang options.\r\n * @param {String} lang The requested lang code.\r\n * @returns {String} Verified lang code.\r\n */\r\nfunction validate(options: Array<ILangOptionEntry>, code: string) {\r\n    let lang = code || 'en-us';\r\n    const entry = _.find(options, e => e.code.substring(0, 2) === lang.substring(0, 2));\r\n    if (entry) {\r\n        lang = entry.code;\r\n    }\r\n\r\n    return lang;\r\n}\r\n\r\n\r\n@Injectable()\r\nexport class ResourceLoaderService {\r\n\r\n    private _resourceLoader: ResourceLoader;\r\n\r\n    constructor(ngZone: NgZone) {\r\n        const cache = new SlidingExpirationCache<any>(3 * 60, 5 * 60, ngZone);\r\n        this._resourceLoader = new ResourceLoader(cache);\r\n    }\r\n\r\n    public get resourceLoader() {\r\n        return this._resourceLoader;\r\n    }\r\n\r\n    /**\r\n     * Loads the dictionary for the given lang code.\r\n     * @function loadPromise\r\n     * @param {String} langCode The requested language code.\r\n     * @param {String}[] filter The optional language code which we are not interested in.\r\n     * @returns {Promise} The promise with the state of the loaded language dictionary.\r\n     * @throws {Error}\r\n     */\r\n    loadPromise(langCode: string, filter: string) {\r\n        const resourceLoader = this._resourceLoader;\r\n        return resourceLoader.getPromise<string>('lang.options', id => id)\r\n            .then(function(resolvedOptionsUrl) {\r\n                return loadJsonUriP(resolvedOptionsUrl);\r\n            })\r\n            .then(function(resolvedOptions) {\r\n                return validate(resolvedOptions, langCode);\r\n            })\r\n            .then(function(resolvedLangCode) {\r\n                if (resolvedLangCode === filter) {\r\n                    throw new Error('Loading the current language: ' + resolvedLangCode);\r\n                }\r\n                return resolvedLangCode;\r\n            })\r\n            .then(function(filteredLangCode) {\r\n                langCode = filteredLangCode;\r\n                return resourceLoader.getPromise<string>('lang.urlTmpl', id => id);\r\n            })\r\n            .then(function(resolvedUrlTmpl) {\r\n                return replace(resolvedUrlTmpl, { code: langCode });\r\n            })\r\n            .then(function(resolvedUrl) {\r\n                return loadJsonUriP(resolvedUrl);\r\n            })\r\n            .then(function(resolvedData) {\r\n                I18n.add(resolvedData.code, resolvedData.items);\r\n                I18n.recycleOthers(resolvedData.code);\r\n                return resolvedData;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Load lang options\r\n     * @function loadOptionPromise\r\n     * @returns {Promise}\r\n     */\r\n    loadOptionPromise() {\r\n        return this._resourceLoader.getPromise('lang.options', id => id)\r\n            .then(function(resolvedOptionsUrl) {\r\n                return loadJsonUriP(resolvedOptionsUrl);\r\n            });\r\n    }\r\n}\r\n"]}